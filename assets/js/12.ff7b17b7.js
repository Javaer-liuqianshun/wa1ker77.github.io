(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{175:function(t,a,s){t.exports=s.p+"assets/img/UnsafeSequence.4969eb50.jpg"},208:function(t,a,s){"use strict";s.r(a);var e=[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"线程介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" 线程介绍")]),t._v(" "),e("p",[e("strong",[t._v("线程允许程序控制流的多重分支同时存在于一个进程")]),t._v("。它们共享进程范围内的资源，比如内存和文件句柄，但是"),e("strong",[t._v("每一个线程有其自己的程序计数器(program counter)、栈(stack)和堆(head)")]),t._v("。")]),t._v(" "),e("p",[t._v("线程有时候被称为"),e("strong",[t._v("轻量级进程")]),t._v("，并且大多数现代操作系统把线程作为时序调度的基本单元。")]),t._v(" "),e("h2",{attrs:{id:"线程的优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程的优点","aria-hidden":"true"}},[t._v("#")]),t._v(" 线程的优点")]),t._v(" "),e("p",[t._v("线程可以把异步的工作流程转化为普遍存在的顺序流程，使程序模拟人类工作和交互变得更容易。")]),t._v(" "),e("h2",{attrs:{id:"线程的风险"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程的风险","aria-hidden":"true"}},[t._v("#")]),t._v(" 线程的风险")]),t._v(" "),e("p",[t._v("在没有进行充分同步的情况下，多线程中的各个操作的执行顺序是不可预测的。")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NotThreadSafe")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnsafeSequence")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 返回value+1的值\n     */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[e("strong",[t._v("UnsafeSequence在单线程中运行没有问题，在多线程会引发线程安全的问题")]),t._v("。引发线程安全的原因是 "),e("code",[t._v("value++")]),t._v("不是一个原子操作，事实上它分为3个独立的操作：读取这个值，使之加1，再写入新值。")]),t._v(" "),e("div",{staticStyle:{"text-align":"center"}},[e("img",{attrs:{src:s(175)}}),e("p",[t._v("图1 UnsafeSequence多线程引发线程安全过程")])]),t._v(" "),e("p",[t._v("图1 A和B两个线程可能出现A读取value值为9，执行+1操作后，还没有把新值写入主存时，这时B读取value值，value值在主存中仍为9。最后A和B执行完后主存中value值为10，此时出现了线程安全问题。")]),t._v(" "),e("p",[t._v("UnsafeSequence阐述了一种常见的并发问题："),e("strong",[t._v("竞争条件")]),t._v("(race condition)。")]),t._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("竞争条件")]),t._v(" "),e("p",[t._v("当某个计算的正确性取决于多个线程的交替执行时时序时，那么久会发生竞争条件。竞争条件类型主要包括：1.先检查后执行，先检查后执行最常见情况就是延迟初始化；2.读取 - 修改 - 写入，例如递增的一个计数器")])])])}],n=s(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},e,!1,null,null,null);r.options.__file="introduction.md";a.default=r.exports}}]);